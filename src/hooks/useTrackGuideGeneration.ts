import { useState, useCallback } from 'react';
import { generateTrackGuide } from '../services/geminiService';
import { TrackGuideInputs, TrackGuideResult } from '../types/trackGuide';

interface UseTrackGuideGenerationReturn {
  isGenerating: boolean;
  error: string | null;
  generateGuide: (inputs: TrackGuideInputs) => Promise<TrackGuideResult | null>;
  clearError: () => void;
}

export const useTrackGuideGeneration = (): UseTrackGuideGenerationReturn => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const generateGuide = useCallback(async (inputs: TrackGuideInputs): Promise<TrackGuideResult | null> => {
    setIsGenerating(true);
    setError(null);

    try {
      // Validate inputs
      if (!inputs.genre?.trim()) {
        throw new Error('Genre is required');
      }

      if (!inputs.vibe?.trim()) {
        throw new Error('Vibe/mood is required');
      }

      // Generate the track guide
      const result = await generateTrackGuide(inputs);
      
      if (!result) {
        throw new Error('Failed to generate track guide');
      }

      // Create the final result with metadata
      const createdAt = new Date().toISOString();
      
      const finalGuidebookContent = `# Track Guide: ${inputs.genre} - ${inputs.vibe}

## Overview
**Genre:** ${inputs.genre}
**Vibe/Mood:** ${inputs.vibe}
**DAW:** ${inputs.daw || 'Not specified'}
**Generated:** ${new Date(createdAt).toLocaleDateString()}

---

${result.content}

---

## Generation Details
- **Available Instruments:** ${inputs.availableInstruments || 'Not specified'}
- **Additional Context:** ${inputs.additionalContext || 'None provided'}
- **Generated At:** ${createdAt}
`;

      const trackGuideResult: TrackGuideResult = {
        id: `guide_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        title: `${inputs.genre} - ${inputs.vibe}`,
        genre: inputs.genre,
        vibe: inputs.vibe,
        daw: inputs.daw || '',
        additionalContext: inputs.additionalContext || '',
        availableInstruments: inputs.availableInstruments || '',
        content: finalGuidebookContent,
        createdAt: createdAt,
        sections: result.sections || [],
        metadata: {
          generationTime: Date.now(),
          inputHash: btoa(JSON.stringify(inputs)),
          version: '1.0'
        }
      };

      return trackGuideResult;

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';
      console.error('Track guide generation error:', err);
      setError(errorMessage);
      return null;
    } finally {
      setIsGenerating(false);
    }
  }, []);

  return {
    isGenerating,
    error,
    generateGuide,
    clearError
  };
};

// Helper function to validate track guide inputs
export const validateTrackGuideInputs = (inputs: TrackGuideInputs): string[] => {
  const errors: string[] = [];

  if (!inputs.genre?.trim()) {
    errors.push('Genre is required');
  }

  if (!inputs.vibe?.trim()) {
    errors.push('Vibe/mood is required');
  }

  if (inputs.genre && inputs.genre.length > 100) {
    errors.push('Genre must be less than 100 characters');
  }

  if (inputs.vibe && inputs.vibe.length > 100) {
    errors.push('Vibe must be less than 100 characters');
  }

  if (inputs.additionalContext && inputs.additionalContext.length > 1000) {
    errors.push('Additional context must be less than 1000 characters');
  }

  return errors;
};

// Helper function to format track guide for export
export const formatTrackGuideForExport = (guide: TrackGuideResult): string => {
  return `# ${guide.title}

**Generated:** ${new Date(guide.createdAt).toLocaleDateString()}
**Genre:** ${guide.genre}
**Vibe:** ${guide.vibe}
**DAW:** ${guide.daw || 'Not specified'}

---

${guide.content}

---

*Generated by TrackGuide AI Assistant*
`;
};