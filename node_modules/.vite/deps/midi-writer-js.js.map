{
  "version": 3,
  "sources": ["../../note-parser/index.js", "../../tonal-midi/index.js", "../../midi-writer-js/build/index.js"],
  "sourcesContent": ["'use strict'\n\n// util\nfunction fillStr (s, num) { return Array(num + 1).join(s) }\nfunction isNum (x) { return typeof x === 'number' }\nfunction isStr (x) { return typeof x === 'string' }\nfunction isDef (x) { return typeof x !== 'undefined' }\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nexport function regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true the strings it's supposed to contain a note number\n * and some category (for example an scale: 'C# major'). It's false by default,\n * but when true, en extra tonicOf property is returned with the category ('major')\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics\n * since, for example, chroma of 'Cb' and 'B' are both 11\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nexport function parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || (!isTonic && m[4])) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  var pos = SEMITONES[p.step] + p.alt\n  p.chroma = pos < 0 ? 12 + pos : pos % 12\n  if (m[3]) { // has octave\n    p.oct = +m[3]\n    p.midi = pos + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\nvar LETTERS = 'CDEFGAB'\nfunction accStr (n) { return !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n) }\nfunction octStr (n) { return !isNum(n) ? '' : '' + n }\n\n/**\n * Create a string from a parsed object or `step, alteration, octave` parameters\n * @param {Object} obj - the parsed data object\n * @return {String} a note string or null if not valid parameters\n * @since 1.2\n * @example\n * parser.build(parser.parse('cb2')) // => 'Cb2'\n *\n * @example\n * // it accepts (step, alteration, octave) parameters:\n * parser.build(3) // => 'F'\n * parser.build(3, -1) // => 'Fb'\n * parser.build(3, -1, 4) // => 'Fb4'\n */\nexport function build (s, a, o) {\n  if (s === null || typeof s === 'undefined') return null\n  if (s.step) return build(s.step, s.alt, s.oct)\n  if (s < 0 || s > 6) return null\n  return LETTERS.charAt(s) + accStr(a) + octStr(o)\n}\n\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String|Integer} note - the note name or midi number\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n * @example\n * // midi numbers are bypassed (even as strings)\n * parser.midi(60) // => 60\n * parser.midi('60') // => 60\n */\nexport function midi (note) {\n  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128) return +note\n  var p = parse(note)\n  return p && isDef(p.midi) ? p.midi : null\n}\n\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name or note midi number\n * @param {String} tuning - (Optional) the A4 frequency (440 by default)\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n * @example\n * // can change tuning (440 by default)\n * parser.freq('A4', 444) // => 444\n * parser.freq('A3', 444) // => 222\n * @example\n * // it accepts midi numbers (as numbers and as strings)\n * parser.freq(69) // => 440\n * parser.freq('69', 442) // => 442\n */\nexport function freq (note, tuning) {\n  var m = midi(note)\n  return m === null ? null : midiToFreq(m, tuning)\n}\n\nexport function letter (src) { return (parse(src) || {}).letter }\nexport function acc (src) { return (parse(src) || {}).acc }\nexport function pc (src) { return (parse(src) || {}).pc }\nexport function step (src) { return (parse(src) || {}).step }\nexport function alt (src) { return (parse(src) || {}).alt }\nexport function chroma (src) { return (parse(src) || {}).chroma }\nexport function oct (src) { return (parse(src) || {}).oct }\n", "/**\n * A midi note number is a number representation of a note pitch. It can be\n * integers so it's equal tempered tuned, or float to indicate it's not\n * tuned into equal temepered scale.\n *\n * This module contains functions to convert to and from midi notes.\n *\n * @example\n * var midi = require('tonal-midi')\n * midi.toMidi('A4') // => 69\n * midi.note(69) // => 'A4'\n * midi.note(61) // => 'Db4'\n * midi.note(61, true) // => 'C#4'\n *\n * @module midi\n */\n\nimport { midi } from 'note-parser'\n\n/**\n * Convert the given note to a midi note number. If you pass a midi number it\n * will returned as is.\n *\n * @param {Array|String|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * midi.toMidi('C4') // => 60\n * midi.toMidi(60) // => 60\n * midi.toMidi('60') // => 60\n */\nexport function toMidi (val) {\n  if (Array.isArray(val) && val.length === 2) return val[0] * 7 + val[1] * 12 + 12\n  return midi(val)\n}\n\nvar FLATS = 'C Db D Eb E F Gb G Ab A Bb B'.split(' ')\nvar SHARPS = 'C C# D D# E F F# G G# A A# B'.split(' ')\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {Integer} midi - the midi note number\n * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {String} the note name\n * @example\n * var midi = require('tonal-midi')\n * midi.note(61) // => 'Db4'\n * midi.note(61, true) // => 'C#4'\n * // it rounds to nearest note\n * midi.note(61.7) // => 'D4'\n */\nexport function note (num, sharps) {\n  if (num === true || num === false) return function (m) { return note(m, num) }\n  num = Math.round(num)\n  var pcs = sharps === true ? SHARPS : FLATS\n  var pc = pcs[num % 12]\n  var o = Math.floor(num / 12) - 1\n  return pc + o\n}\n", "'use strict';\n\nvar tonalMidi = require('tonal-midi');\n\n/**\n * MIDI file format constants.\n * @return {Constants}\n */\nvar Constants = {\n  VERSION: '2.1.4',\n  HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64],\n  // Mthd\n  HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06],\n  // Header size for SMF\n  HEADER_CHUNK_FORMAT0: [0x00, 0x00],\n  // Midi Type 0 id\n  HEADER_CHUNK_FORMAT1: [0x00, 0x01],\n  // Midi Type 1 id\n  HEADER_CHUNK_DIVISION: [0x00, 0x80],\n  // Defaults to 128 ticks per beat\n  TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b],\n  // MTrk,\n  META_EVENT_ID: 0xFF,\n  META_TEXT_ID: 0x01,\n  META_COPYRIGHT_ID: 0x02,\n  META_TRACK_NAME_ID: 0x03,\n  META_INSTRUMENT_NAME_ID: 0x04,\n  META_LYRIC_ID: 0x05,\n  META_MARKER_ID: 0x06,\n  META_CUE_POINT: 0x07,\n  META_TEMPO_ID: 0x51,\n  META_SMTPE_OFFSET: 0x54,\n  META_TIME_SIGNATURE_ID: 0x58,\n  META_KEY_SIGNATURE_ID: 0x59,\n  META_END_OF_TRACK_ID: [0x2F, 0x00],\n  CONTROLLER_CHANGE_STATUS: 0xB0,\n  // includes channel number (0)\n  PITCH_BEND_STATUS: 0xE0 // includes channel number (0)\n\n};\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _wrapRegExp() {\n  _wrapRegExp = function (re, groups) {\n    return new BabelRegExp(re, void 0, groups);\n  };\n\n  var _super = RegExp.prototype,\n      _groups = new WeakMap();\n\n  function BabelRegExp(re, flags, groups) {\n    var _this = new RegExp(re, flags);\n\n    return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);\n  }\n\n  function buildGroups(result, re) {\n    var g = _groups.get(re);\n\n    return Object.keys(g).reduce(function (groups, name) {\n      return groups[name] = result[g[name]], groups;\n    }, Object.create(null));\n  }\n\n  return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n\n    return result && (result.groups = buildGroups(result, this)), result;\n  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (\"string\" == typeof substitution) {\n      var groups = _groups.get(this);\n\n      return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n        return \"$\" + groups[name];\n      }));\n    }\n\n    if (\"function\" == typeof substitution) {\n      var _this = this;\n\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = arguments;\n        return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n      });\n    }\n\n    return _super[Symbol.replace].call(this, str, substitution);\n  }, _wrapRegExp.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\n/**\n * Static utility functions used throughout the library.\n */\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"version\",\n    value:\n    /**\n     * Gets MidiWriterJS version number.\n     * @return {string}\n     */\n    function version() {\n      return Constants.VERSION;\n    }\n    /**\n     * Convert a string to an array of bytes\n     * @param {string} string\n     * @return {array}\n     */\n\n  }, {\n    key: \"stringToBytes\",\n    value: function stringToBytes(string) {\n      return string.split('').map(function (_char) {\n        return _char.charCodeAt();\n      });\n    }\n    /**\n     * Checks if argument is a valid number.\n     * @param {*} n - Value to check\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n    /**\n     * Returns the correct MIDI number for the specified pitch.\n     * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi\n     * @param {(string|number)} pitch - 'C#4' or midi note code\n     * @param {string} middleC\n     * @return {number}\n     */\n\n  }, {\n    key: \"getPitch\",\n    value: function getPitch(pitch) {\n      var middleC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'C4';\n      return 60 - tonalMidi.toMidi(middleC) + tonalMidi.toMidi(pitch);\n    }\n    /**\n     * Translates number of ticks to MIDI timestamp format, returning an array of\n     * hex strings with the time values. Midi has a very particular time to express time,\n     * take a good look at the spec before ever touching this function.\n     * Thanks to https://github.com/sergi/jsmidi\n     *\n     * @param {number} ticks - Number of ticks to be translated\n     * @return {array} - Bytes that form the MIDI time value\n     */\n\n  }, {\n    key: \"numberToVariableLength\",\n    value: function numberToVariableLength(ticks) {\n      ticks = Math.round(ticks);\n      var buffer = ticks & 0x7F; // eslint-disable-next-line no-cond-assign\n\n      while (ticks = ticks >> 7) {\n        buffer <<= 8;\n        buffer |= ticks & 0x7F | 0x80;\n      }\n\n      var bList = [];\n\n      while (true) {\n        bList.push(buffer & 0xff);\n        if (buffer & 0x80) buffer >>= 8;else {\n          break;\n        }\n      }\n\n      return bList;\n    }\n    /**\n     * Counts number of bytes in string\n     * @param {string} s\n     * @return {array}\n     */\n\n  }, {\n    key: \"stringByteCount\",\n    value: function stringByteCount(s) {\n      return encodeURI(s).split(/%..|./).length - 1;\n    }\n    /**\n     * Get an int from an array of bytes.\n     * @param {array} bytes\n     * @return {number}\n     */\n\n  }, {\n    key: \"numberFromBytes\",\n    value: function numberFromBytes(bytes) {\n      var hex = '';\n      var stringResult;\n      bytes.forEach(function (_byte) {\n        stringResult = _byte.toString(16); // ensure string is 2 chars\n\n        if (stringResult.length == 1) stringResult = \"0\" + stringResult;\n        hex += stringResult;\n      });\n      return parseInt(hex, 16);\n    }\n    /**\n     * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded\n     * @param {number} number\n     * @param {number} bytesNeeded\n     * @return {array} - Array of bytes\n     */\n\n  }, {\n    key: \"numberToBytes\",\n    value: function numberToBytes(number, bytesNeeded) {\n      bytesNeeded = bytesNeeded || 1;\n      var hexString = number.toString(16);\n\n      if (hexString.length & 1) {\n        // Make sure hex string is even number of chars\n        hexString = '0' + hexString;\n      } // Split hex string into an array of two char elements\n\n\n      var hexArray = hexString.match(/.{2}/g); // Now parse them out as integers\n\n      hexArray = hexArray.map(function (item) {\n        return parseInt(item, 16);\n      }); // Prepend empty bytes if we don't have enough\n\n      if (hexArray.length < bytesNeeded) {\n        while (bytesNeeded - hexArray.length > 0) {\n          hexArray.unshift(0);\n        }\n      }\n\n      return hexArray;\n    }\n    /**\n     * Converts value to array if needed.\n     * @param {string} value\n     * @return {array}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(value) {\n      if (Array.isArray(value)) return value;\n      return [value];\n    }\n    /**\n     * Converts velocity to value 0-127\n     * @param {number} velocity - Velocity value 1-100\n     * @return {number}\n     */\n\n  }, {\n    key: \"convertVelocity\",\n    value: function convertVelocity(velocity) {\n      // Max passed value limited to 100\n      velocity = velocity > 100 ? 100 : velocity;\n      return Math.round(velocity / 100 * 127);\n    }\n    /**\n     * Gets the total number of ticks of a specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {(string|array)} duration\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTickDuration\",\n    value: function getTickDuration(duration) {\n      if (Array.isArray(duration)) {\n        // Recursively execute this method for each item in the array and return the sum of tick durations.\n        return duration.map(function (value) {\n          return Utils.getTickDuration(value);\n        }).reduce(function (a, b) {\n          return a + b;\n        }, 0);\n      }\n\n      duration = duration.toString();\n\n      if (duration.toLowerCase().charAt(0) === 't') {\n        // If duration starts with 't' then the number that follows is an explicit tick count\n        var ticks = parseInt(duration.substring(1));\n\n        if (isNaN(ticks) || ticks < 0) {\n          throw new Error(duration + ' is not a valid duration.');\n        }\n\n        return ticks;\n      } // Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION\n\n\n      var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);\n      var tickDuration = quarterTicks * Utils.getDurationMultiplier(duration);\n      return Utils.getRoundedIfClose(tickDuration);\n    }\n    /**\n     * Due to rounding errors in JavaScript engines,\n     * it's safe to round when we're very close to the actual tick number\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRoundedIfClose\",\n    value: function getRoundedIfClose(tick) {\n      var roundedTick = Math.round(tick);\n      return Math.abs(roundedTick - tick) < 0.000001 ? roundedTick : tick;\n    }\n    /**\n     * Due to low precision of MIDI,\n     * we need to keep track of rounding errors in deltas.\n     * This function will calculate the rounding error for a given duration.\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n\n  }, {\n    key: \"getPrecisionLoss\",\n    value: function getPrecisionLoss(tick) {\n      var roundedTick = Math.round(tick);\n      return roundedTick - tick;\n    }\n    /**\n     * Gets what to multiple ticks/quarter note by to get the specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {string} duration\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDurationMultiplier\",\n    value: function getDurationMultiplier(duration) {\n      // Need to apply duration here.\n      // Quarter note == Constants.HEADER_CHUNK_DIVISION ticks.\n      if (duration === '0') return 0;\n      var match = duration.match( /*#__PURE__*/_wrapRegExp(/^(d+)?(\\d+)(?:t(\\d*))?/, {\n        dotted: 1,\n        base: 2,\n        tuplet: 3\n      }));\n\n      if (match) {\n        var base = Number(match.groups.base); // 1 or any power of two:\n\n        var isValidBase = base === 1 || (base & base - 1) === 0;\n\n        if (isValidBase) {\n          // how much faster or slower is this note compared to a quarter?\n          var ratio = base / 4;\n          var durationInQuarters = 1 / ratio;\n          var _match$groups = match.groups,\n              dotted = _match$groups.dotted,\n              tuplet = _match$groups.tuplet;\n\n          if (dotted) {\n            var thisManyDots = dotted.length;\n            var divisor = Math.pow(2, thisManyDots);\n            durationInQuarters = durationInQuarters + durationInQuarters * ((divisor - 1) / divisor);\n          }\n\n          if (typeof tuplet === 'string') {\n            var fitInto = durationInQuarters * 2; // default to triplet:\n\n            var thisManyNotes = Number(tuplet || '3');\n            durationInQuarters = fitInto / thisManyNotes;\n          }\n\n          return durationInQuarters;\n        }\n      }\n\n      throw new Error(duration + ' is not a valid duration.');\n    }\n  }]);\n\n  return Utils;\n}();\n\n/**\n * Holds all data for a \"controller change\" MIDI event\n * @param {object} fields {controllerNumber: integer, controllerValue: integer, delta: integer}\n * @return {ControllerChangeEvent}\n */\n\nvar ControllerChangeEvent = /*#__PURE__*/_createClass(function ControllerChangeEvent(fields) {\n  _classCallCheck(this, ControllerChangeEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'controller'; // delta time defaults to 0.\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.CONTROLLER_CHANGE_STATUS, fields.controllerNumber, fields.controllerValue);\n});\n\n/**\n * Object representation of a cue point meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CuePointEvent}\n */\n\nvar CuePointEvent = /*#__PURE__*/_createClass(function CuePointEvent(fields) {\n  _classCallCheck(this, CuePointEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'cue-point';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_CUE_POINT, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Text\n  );\n});\n\n/**\n * Object representation of a end track meta event.\n * @param {object} fields {delta: integer}\n * @return {EndTrackEvent}\n */\n\nvar EndTrackEvent = /*#__PURE__*/_createClass(function EndTrackEvent(fields) {\n  _classCallCheck(this, EndTrackEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'end-track'; // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_END_OF_TRACK_ID);\n});\n\n/**\n * Object representation of an instrument name meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {InstrumentNameEvent}\n */\n\nvar InstrumentNameEvent = /*#__PURE__*/_createClass(function InstrumentNameEvent(fields) {\n  _classCallCheck(this, InstrumentNameEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'instrument-name';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_INSTRUMENT_NAME_ID, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Instrument name\n  );\n});\n\n/**\n * Object representation of a key signature meta event.\n * @return {KeySignatureEvent}\n */\n\nvar KeySignatureEvent = /*#__PURE__*/_createClass(function KeySignatureEvent(sf, mi) {\n  _classCallCheck(this, KeySignatureEvent);\n\n  this.type = 'key-signature';\n  var mode = mi || 0;\n  sf = sf || 0; //\tFunction called with string notation\n\n  if (typeof mi === 'undefined') {\n    var fifths = [['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'], ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']];\n    var _sflen = sf.length;\n    var note = sf || 'C';\n    if (sf[0] === sf[0].toLowerCase()) mode = 1;\n\n    if (_sflen > 1) {\n      switch (sf.charAt(_sflen - 1)) {\n        case 'm':\n          mode = 1;\n          note = sf.charAt(0).toLowerCase();\n          note = note.concat(sf.substring(1, _sflen - 1));\n          break;\n\n        case '-':\n          mode = 1;\n          note = sf.charAt(0).toLowerCase();\n          note = note.concat(sf.substring(1, _sflen - 1));\n          break;\n\n        case 'M':\n          mode = 0;\n          note = sf.charAt(0).toUpperCase();\n          note = note.concat(sf.substring(1, _sflen - 1));\n          break;\n\n        case '+':\n          mode = 0;\n          note = sf.charAt(0).toUpperCase();\n          note = note.concat(sf.substring(1, _sflen - 1));\n          break;\n      }\n    }\n\n    var fifthindex = fifths[mode].indexOf(note);\n    sf = fifthindex === -1 ? 0 : fifthindex - 7;\n  } // Start with zero time delta\n\n\n  this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_KEY_SIGNATURE_ID, [0x02], // Size\n  Utils.numberToBytes(sf, 1), // Number of sharp or flats ( < 0 flat; > 0 sharp)\n  Utils.numberToBytes(mode, 1) // Mode: 0 major, 1 minor\n  );\n});\n\n/**\n * Object representation of a lyric meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {LyricEvent}\n */\n\nvar LyricEvent = /*#__PURE__*/_createClass(function LyricEvent(fields) {\n  _classCallCheck(this, LyricEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'lyric';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_LYRIC_ID, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Text\n  );\n});\n\n/**\n * Object representation of a marker meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {MarkerEvent}\n */\n\nvar MarkerEvent = /*#__PURE__*/_createClass(function MarkerEvent(fields) {\n  _classCallCheck(this, MarkerEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'marker';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_MARKER_ID, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Text\n  );\n});\n\n/**\n * Holds all data for a \"note on\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOnEvent}\n */\n\nvar NoteOnEvent = /*#__PURE__*/function () {\n  function NoteOnEvent(fields) {\n    _classCallCheck(this, NoteOnEvent);\n\n    // Set default fields\n    fields = Object.assign({\n      channel: 1,\n      startTick: null,\n      velocity: 50,\n      wait: 0\n    }, fields);\n    this.type = 'note-on';\n    this.channel = fields.channel;\n    this.pitch = fields.pitch;\n    this.wait = fields.wait;\n    this.velocity = fields.velocity;\n    this.startTick = fields.startTick;\n    this.tick = null;\n    this.delta = null;\n    this.data = fields.data;\n  }\n  /**\n   * Builds int array for this event.\n   * @param {Track} track - parent track\n   * @return {NoteOnEvent}\n   */\n\n\n  _createClass(NoteOnEvent, [{\n    key: \"buildData\",\n    value: function buildData(track, precisionDelta) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.data = []; // Explicitly defined startTick event\n\n      if (this.startTick) {\n        this.tick = Utils.getRoundedIfClose(this.startTick); // If this is the first event in the track then use event's starting tick as delta.\n\n        if (track.tickPointer == 0) {\n          this.delta = this.tick;\n        }\n      } else {\n        this.delta = Utils.getTickDuration(this.wait);\n        this.tick = Utils.getRoundedIfClose(track.tickPointer + this.delta);\n      }\n\n      this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n      this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection).concat(this.getStatusByte(), Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n      return this;\n    }\n    /**\n     * Gets the note on status code based on the selected channel. 0x9{0-F}\n     * Note on at channel 0 is 0x90 (144)\n     * 0 = Ch 1\n     * @return {number}\n     */\n\n  }, {\n    key: \"getStatusByte\",\n    value: function getStatusByte() {\n      return 144 + this.channel - 1;\n    }\n  }]);\n\n  return NoteOnEvent;\n}();\n\n/**\n * Holds all data for a \"note off\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOffEvent}\n */\n\nvar NoteOffEvent = /*#__PURE__*/function () {\n  function NoteOffEvent(fields) {\n    _classCallCheck(this, NoteOffEvent);\n\n    // Set default fields\n    fields = Object.assign({\n      channel: 1,\n      velocity: 50,\n      tick: null\n    }, fields);\n    this.type = 'note-off';\n    this.channel = fields.channel;\n    this.pitch = fields.pitch;\n    this.duration = fields.duration;\n    this.velocity = fields.velocity;\n    this.tick = fields.tick;\n    this.delta = Utils.getTickDuration(this.duration);\n    this.data = fields.data;\n  }\n  /**\n   * Builds int array for this event.\n   * @param {Track} track - parent track\n   * @return {NoteOffEvent}\n   */\n\n\n  _createClass(NoteOffEvent, [{\n    key: \"buildData\",\n    value: function buildData(track, precisionDelta) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (this.tick === null) {\n        this.tick = Utils.getRoundedIfClose(this.delta + track.tickPointer);\n      }\n\n      this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n      this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection).concat(this.getStatusByte(), Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n      return this;\n    }\n    /**\n     * Gets the note off status code based on the selected channel. 0x8{0-F}\n     * Note off at channel 0 is 0x80 (128)\n     * 0 = Ch 1\n     * @return {number}\n     */\n\n  }, {\n    key: \"getStatusByte\",\n    value: function getStatusByte() {\n      return 128 + this.channel - 1;\n    }\n  }]);\n\n  return NoteOffEvent;\n}();\n\n/**\n * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.\n * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}\n * @return {NoteEvent}\n */\n\nvar NoteEvent = /*#__PURE__*/function () {\n  function NoteEvent(fields) {\n    _classCallCheck(this, NoteEvent);\n\n    // Set default fields\n    fields = Object.assign({\n      channel: 1,\n      repeat: 1,\n      sequential: false,\n      startTick: null,\n      velocity: 50,\n      wait: 0\n    }, fields);\n    this.data = [];\n    this.type = 'note';\n    this.pitch = Utils.toArray(fields.pitch);\n    this.channel = fields.channel;\n    this.duration = fields.duration;\n    this.grace = fields.grace;\n    this.repeat = fields.repeat;\n    this.sequential = fields.sequential;\n    this.startTick = fields.startTick;\n    this.velocity = fields.velocity;\n    this.wait = fields.wait;\n    this.tickDuration = Utils.getTickDuration(this.duration);\n    this.restDuration = Utils.getTickDuration(this.wait);\n    this.events = []; // Hold actual NoteOn/NoteOff events\n  }\n  /**\n   * Builds int array for this event.\n   * @return {NoteEvent}\n   */\n\n\n  _createClass(NoteEvent, [{\n    key: \"buildData\",\n    value: function buildData() {\n      var _this = this;\n\n      // Reset data array\n      this.data = []; // Apply grace note(s) and subtract ticks (currently 1 tick per grace note) from tickDuration so net value is the same\n\n      if (this.grace) {\n        var graceDuration = 1;\n        this.grace = Utils.toArray(this.grace);\n        this.grace.forEach(function () {\n          var noteEvent = new NoteEvent({\n            pitch: _this.grace,\n            duration: 'T' + graceDuration\n          });\n          _this.data = _this.data.concat(noteEvent.data);\n        });\n      } // fields.pitch could be an array of pitches.\n      // If so create note events for each and apply the same duration.\n      // By default this is a chord if it's an array of notes that requires one NoteOnEvent.\n      // If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.\n\n\n      if (!this.sequential) {\n        // Handle repeat\n        for (var j = 0; j < this.repeat; j++) {\n          // Note on\n          this.pitch.forEach(function (p, i) {\n            var noteOnNew;\n\n            if (i == 0) {\n              noteOnNew = new NoteOnEvent({\n                channel: _this.channel,\n                wait: _this.wait,\n                velocity: _this.velocity,\n                pitch: p,\n                startTick: _this.startTick\n              });\n            } else {\n              // Running status (can ommit the note on status)\n              //noteOn = new NoteOnEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n              noteOnNew = new NoteOnEvent({\n                channel: _this.channel,\n                wait: 0,\n                velocity: _this.velocity,\n                pitch: p,\n                startTick: _this.startTick\n              });\n            }\n\n            _this.events.push(noteOnNew);\n          }); // Note off\n\n          this.pitch.forEach(function (p, i) {\n            var noteOffNew;\n\n            if (i == 0) {\n              //noteOff = new NoteOffEvent({data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), Utils.convertVelocity(this.velocity))});\n              noteOffNew = new NoteOffEvent({\n                channel: _this.channel,\n                duration: _this.duration,\n                velocity: _this.velocity,\n                pitch: p,\n                tick: _this.startTick !== null ? Utils.getTickDuration(_this.duration) + _this.startTick : null\n              });\n            } else {\n              // Running status (can ommit the note off status)\n              //noteOff = new NoteOffEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n              noteOffNew = new NoteOffEvent({\n                channel: _this.channel,\n                duration: 0,\n                velocity: _this.velocity,\n                pitch: p,\n                tick: _this.startTick !== null ? Utils.getTickDuration(_this.duration) + _this.startTick : null\n              });\n            }\n\n            _this.events.push(noteOffNew);\n          });\n        }\n      } else {\n        // Handle repeat\n        for (var _j = 0; _j < this.repeat; _j++) {\n          this.pitch.forEach(function (p, i) {\n            var noteOnNew = new NoteOnEvent({\n              channel: _this.channel,\n              wait: i > 0 ? 0 : _this.wait,\n              // wait only applies to first note in repetition\n              velocity: _this.velocity,\n              pitch: p,\n              startTick: _this.startTick\n            });\n            var noteOffNew = new NoteOffEvent({\n              channel: _this.channel,\n              duration: _this.duration,\n              velocity: _this.velocity,\n              pitch: p\n            });\n\n            _this.events.push(noteOnNew, noteOffNew);\n          });\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return NoteEvent;\n}();\n\n/**\n * Holds all data for a \"Pitch Bend\" MIDI event\n * [ -1.0, 0, 1.0 ] ->  [ 0, 8192, 16383]\n * @param {object} fields { bend : float, channel : int, delta: int }\n * @return {PitchBendEvent}\n */\n\nvar scale14bits = function scale14bits(zeroOne) {\n  if (zeroOne <= 0) {\n    return Math.floor(16384 * (zeroOne + 1) / 2);\n  }\n\n  return Math.floor(16383 * (zeroOne + 1) / 2);\n};\n\nvar PitchBendEvent = /*#__PURE__*/_createClass(function PitchBendEvent(fields) {\n  _classCallCheck(this, PitchBendEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'pitch-bend';\n  var bend14 = scale14bits(fields.bend);\n  var channel = fields.channel || 0;\n  var lsbValue = bend14 & 0x7f;\n  var msbValue = bend14 >> 7 & 0x7f;\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.PITCH_BEND_STATUS | channel, lsbValue, msbValue);\n});\n\n/**\n * Holds all data for a \"program change\" MIDI event\n * @param {object} fields {instrument: integer, delta: integer}\n * @return {ProgramChangeEvent}\n */\n\nvar ProgramChangeEvent = /*#__PURE__*/function () {\n  function ProgramChangeEvent(fields) {\n    _classCallCheck(this, ProgramChangeEvent);\n\n    // Set default fields\n    this.fields = Object.assign({\n      channel: 1,\n      delta: 0x00\n    }, fields);\n    this.type = 'program'; // delta time defaults to 0.\n\n    this.data = Utils.numberToVariableLength(this.fields.delta).concat(this.getStatusByte(), this.fields.instrument);\n  }\n  /**\n   * Gets the status code based on the selected channel. 0xC{0-F}\n   * Program change status byte for channel 0 is 0xC0 (192)\n   * 0 = Ch 1\n   * @return {number}\n   */\n\n\n  _createClass(ProgramChangeEvent, [{\n    key: \"getStatusByte\",\n    value: function getStatusByte() {\n      return 192 + this.fields.channel - 1;\n    }\n  }]);\n\n  return ProgramChangeEvent;\n}();\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {bpm: integer, delta: integer}\n * @return {TempoEvent}\n */\n\nvar TempoEvent = /*#__PURE__*/_createClass(function TempoEvent(fields) {\n  _classCallCheck(this, TempoEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'tempo';\n  this.tick = fields.tick;\n  var tempo = Math.round(60000000 / fields.bpm); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_TEMPO_ID, [0x03], // Size\n  Utils.numberToBytes(tempo, 3) // Tempo, 3 bytes\n  );\n});\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TextEvent}\n */\n\nvar TextEvent = /*#__PURE__*/_createClass(function TextEvent(fields) {\n  _classCallCheck(this, TextEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'text';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_TEXT_ID, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Text\n  );\n});\n\n/**\n * Object representation of a time signature meta event.\n * @return {TimeSignatureEvent}\n */\n\nvar TimeSignatureEvent = /*#__PURE__*/_createClass(function TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock) {\n  _classCallCheck(this, TimeSignatureEvent);\n\n  this.type = 'time-signature'; // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_TIME_SIGNATURE_ID, [0x04], // Size\n  Utils.numberToBytes(numerator, 1), // Numerator, 1 bytes\n  Utils.numberToBytes(Math.log2(denominator), 1), // Denominator is expressed as pow of 2, 1 bytes\n  Utils.numberToBytes(midiclockspertick || 24, 1), // MIDI Clocks per tick, 1 bytes\n  Utils.numberToBytes(notespermidiclock || 8, 1) // Number of 1/32 notes per MIDI clocks, 1 bytes\n  );\n});\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CopyrightEvent}\n */\n\nvar CopyrightEvent = /*#__PURE__*/_createClass(function CopyrightEvent(fields) {\n  _classCallCheck(this, CopyrightEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'copyright';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_COPYRIGHT_ID, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Text\n  );\n});\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TrackNameEvent}\n */\n\nvar TrackNameEvent = /*#__PURE__*/_createClass(function TrackNameEvent(fields) {\n  _classCallCheck(this, TrackNameEvent);\n\n  // Set default fields\n  fields = Object.assign({\n    delta: 0x00\n  }, fields);\n  this.type = 'track-name';\n  var textBytes = Utils.stringToBytes(fields.text); // Start with zero time delta\n\n  this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, Constants.META_TRACK_NAME_ID, Utils.numberToVariableLength(textBytes.length), // Size\n  textBytes // Text\n  );\n});\n\n/**\n * Holds all data for a track.\n * @param {object} fields {type: number, data: array, size: array, events: array}\n * @return {Track}\n */\n\nvar Track = /*#__PURE__*/function () {\n  function Track() {\n    _classCallCheck(this, Track);\n\n    this.type = Constants.TRACK_CHUNK_TYPE;\n    this.data = [];\n    this.size = [];\n    this.events = [];\n    this.explicitTickEvents = []; // If there are any events with an explicit tick defined then we will create a \"sub\" track for those\n    // and merge them in and the end.\n\n    this.tickPointer = 0; // Each time an event is added this will increase\n  }\n  /**\n   * Adds any event type to the track.\n   * Events without a specific startTick property are assumed to be added in order of how they should output.\n   * Events with a specific startTick property are set aside for now will be merged in during build process.\n   * @param {(NoteEvent|ProgramChangeEvent)} events - Event object or array of Event objects.\n   * @param {function} mapFunction - Callback which can be used to apply specific properties to all events.\n   * @return {Track}\n   */\n\n\n  _createClass(Track, [{\n    key: \"addEvent\",\n    value: function addEvent(events, mapFunction) {\n      var _this = this;\n\n      Utils.toArray(events).forEach(function (event, i) {\n        if (event instanceof NoteEvent) {\n          // Handle map function if provided\n          if (typeof mapFunction === 'function') {\n            var properties = mapFunction(i, event);\n\n            if (_typeof(properties) === 'object') {\n              for (var j in properties) {\n                switch (j) {\n                  case 'channel':\n                    event.channel = properties[j];\n                    break;\n\n                  case 'duration':\n                    event.duration = properties[j];\n                    break;\n\n                  case 'sequential':\n                    event.sequential = properties[j];\n                    break;\n\n                  case 'velocity':\n                    event.velocity = Utils.convertVelocity(properties[j]);\n                    break;\n                }\n              }\n            }\n          } // If this note event has an explicit startTick then we need to set aside for now\n\n\n          if (event.startTick !== null) {\n            _this.explicitTickEvents.push(event);\n          } else {\n            // Push each on/off event to track's event stack\n            event.buildData().events.forEach(function (e) {\n              return _this.events.push(e);\n            });\n          }\n        } else if (event instanceof EndTrackEvent) {\n          // Only one EndTrackEvent is allowed, so remove\n          // any existing ones before adding.\n          _this.removeEventsByType('end-track');\n\n          _this.events.push(event);\n        } else {\n          _this.events.push(event);\n        }\n      });\n      return this;\n    }\n    /**\n     * Builds int array of all events.\n     * @param {object} options\n     * @return {Track}\n     */\n\n  }, {\n    key: \"buildData\",\n    value: function buildData() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      // If the last event isn't EndTrackEvent, then tack it onto the data.\n      if (!this.events.length || !(this.events[this.events.length - 1] instanceof EndTrackEvent)) {\n        this.addEvent(new EndTrackEvent());\n      } // Reset\n\n\n      this.data = [];\n      this.size = [];\n      this.tickPointer = 0;\n      var precisionLoss = 0;\n      this.events.forEach(function (event) {\n        // Build event & add to total tick duration\n        if (event instanceof NoteOnEvent || event instanceof NoteOffEvent) {\n          var built = event.buildData(_this2, precisionLoss, options);\n          precisionLoss = Utils.getPrecisionLoss(event.deltaWithPrecisionCorrection || 0);\n          _this2.data = _this2.data.concat(built.data);\n          _this2.tickPointer = Utils.getRoundedIfClose(event.tick);\n        } else if (event instanceof TempoEvent) {\n          _this2.tickPointer = Utils.getRoundedIfClose(event.tick);\n          _this2.data = _this2.data.concat(event.data);\n        } else {\n          _this2.data = _this2.data.concat(event.data);\n        }\n      });\n      this.mergeExplicitTickEvents();\n      this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long\n\n      return this;\n    }\n  }, {\n    key: \"mergeExplicitTickEvents\",\n    value: function mergeExplicitTickEvents() {\n      var _this3 = this;\n\n      if (!this.explicitTickEvents.length) return; // First sort asc list of events by startTick\n\n      this.explicitTickEvents.sort(function (a, b) {\n        return a.startTick - b.startTick;\n      }); // Now this.explicitTickEvents is in correct order, and so is this.events naturally.\n      // For each explicit tick event, splice it into the main list of events and\n      // adjust the delta on the following events so they still play normally.\n\n      this.explicitTickEvents.forEach(function (noteEvent) {\n        // Convert NoteEvent to it's respective NoteOn/NoteOff events\n        // Note that as we splice in events the delta for the NoteOff ones will\n        // Need to change based on what comes before them after the splice.\n        noteEvent.buildData().events.forEach(function (e) {\n          return e.buildData(_this3);\n        }); // Merge each event indivually into this track's event list.\n\n        noteEvent.events.forEach(function (event) {\n          return _this3.mergeSingleEvent(event);\n        });\n      }); // Hacky way to rebuild track with newly spliced events.  Need better solution.\n\n      this.explicitTickEvents = [];\n      this.buildData();\n    }\n    /**\n     * Merges another track's events with this track.\n     * @param {Track} track\n     * @return {Track}\n     */\n\n  }, {\n    key: \"mergeTrack\",\n    value: function mergeTrack(track) {\n      var _this4 = this;\n\n      // First build this track to populate each event's tick property\n      this.buildData(); // Then build track to be merged so that tick property is populated on all events & merge each event.\n\n      track.buildData().events.forEach(function (event) {\n        return _this4.mergeSingleEvent(event);\n      });\n    }\n    /**\n     * Merges a single event into this track's list of events based on event.tick property.\n     * @param {NoteOnEvent|NoteOffEvent} - event\n     * @return {Track}\n     */\n\n  }, {\n    key: \"mergeSingleEvent\",\n    value: function mergeSingleEvent(event) {\n      // There are no events yet, so just add it in.\n      if (!this.events.length) {\n        this.addEvent(event);\n        return;\n      } // Find index of existing event we need to follow with\n\n\n      var lastEventIndex;\n\n      for (var i = 0; i < this.events.length; i++) {\n        if (this.events[i].tick > event.tick) break;\n        lastEventIndex = i;\n      }\n\n      var splicedEventIndex = lastEventIndex + 1; // Need to adjust the delta of this event to ensure it falls on the correct tick.\n\n      event.delta = event.tick - this.events[lastEventIndex].tick; // Splice this event at lastEventIndex + 1\n\n      this.events.splice(splicedEventIndex, 0, event); // Now adjust delta of all following events\n\n      for (var _i = splicedEventIndex + 1; _i < this.events.length; _i++) {\n        // Since each existing event should have a tick value at this point we just need to\n        // adjust delta to that the event still falls on the correct tick.\n        this.events[_i].delta = this.events[_i].tick - this.events[_i - 1].tick;\n      }\n    }\n    /**\n     * Removes all events matching specified type.\n     * @param {string} eventType - Event type\n     * @return {Track}\n     */\n\n  }, {\n    key: \"removeEventsByType\",\n    value: function removeEventsByType(eventType) {\n      var _this5 = this;\n\n      this.events.forEach(function (event, index) {\n        if (event.type === eventType) {\n          _this5.events.splice(index, 1);\n        }\n      });\n      return this;\n    }\n    /**\n     * Sets tempo of the MIDI file.\n     * @param {number} bpm - Tempo in beats per minute.\n     * @param {number} tick - Start tick.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setTempo\",\n    value: function setTempo(bpm) {\n      var tick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this.addEvent(new TempoEvent({\n        bpm: bpm,\n        tick: tick\n      }));\n    }\n    /**\n     * Sets time signature.\n     * @param {number} numerator - Top number of the time signature.\n     * @param {number} denominator - Bottom number of the time signature.\n     * @param {number} midiclockspertick - Defaults to 24.\n     * @param {number} notespermidiclock - Defaults to 8.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setTimeSignature\",\n    value: function setTimeSignature(numerator, denominator, midiclockspertick, notespermidiclock) {\n      return this.addEvent(new TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock));\n    }\n    /**\n     * Sets key signature.\n     * @param {*} sf -\n     * @param {*} mi -\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setKeySignature\",\n    value: function setKeySignature(sf, mi) {\n      return this.addEvent(new KeySignatureEvent(sf, mi));\n    }\n    /**\n     * Adds text to MIDI file.\n     * @param {string} text - Text to add.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addText\",\n    value: function addText(text) {\n      return this.addEvent(new TextEvent({\n        text: text\n      }));\n    }\n    /**\n     * Adds copyright to MIDI file.\n     * @param {string} text - Text of copyright line.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addCopyright\",\n    value: function addCopyright(text) {\n      return this.addEvent(new CopyrightEvent({\n        text: text\n      }));\n    }\n    /**\n     * Adds Sequence/Track Name.\n     * @param {string} text - Text of track name.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addTrackName\",\n    value: function addTrackName(text) {\n      return this.addEvent(new TrackNameEvent({\n        text: text\n      }));\n    }\n    /**\n     * Sets instrument name of track.\n     * @param {string} text - Name of instrument.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addInstrumentName\",\n    value: function addInstrumentName(text) {\n      return this.addEvent(new InstrumentNameEvent({\n        text: text\n      }));\n    }\n    /**\n     * Adds marker to MIDI file.\n     * @param {string} text - Marker text.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(text) {\n      return this.addEvent(new MarkerEvent({\n        text: text\n      }));\n    }\n    /**\n     * Adds cue point to MIDI file.\n     * @param {string} text - Text of cue point.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addCuePoint\",\n    value: function addCuePoint(text) {\n      return this.addEvent(new CuePointEvent({\n        text: text\n      }));\n    }\n    /**\n     * Adds lyric to MIDI file.\n     * @param {string} text - Lyric text to add.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"addLyric\",\n    value: function addLyric(text) {\n      return this.addEvent(new LyricEvent({\n        text: text\n      }));\n    }\n    /**\n     * Channel mode messages\n     * @return {Track}\n     */\n\n  }, {\n    key: \"polyModeOn\",\n    value: function polyModeOn() {\n      var event = new NoteOnEvent({\n        data: [0x00, 0xB0, 0x7E, 0x00]\n      });\n      return this.addEvent(event);\n    }\n    /**\n     * Sets a pitch bend.\n     * @param {float} bend - Bend value ranging [-1,1], zero meaning no bend.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setPitchBend\",\n    value: function setPitchBend(bend) {\n      return this.addEvent(new PitchBendEvent({\n        bend: bend\n      }));\n    }\n    /**\n     * Adds a controller change event\n     * @param {number} number - Control number.\n     * @param {number} value - Control value.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"controllerChange\",\n    value: function controllerChange(number, value) {\n      return this.addEvent(new ControllerChangeEvent({\n        controllerNumber: number,\n        controllerValue: value\n      }));\n    }\n  }]);\n\n  return Track;\n}();\n\nvar VexFlow = /*#__PURE__*/function () {\n  function VexFlow() {\n    _classCallCheck(this, VexFlow);\n  }\n\n  _createClass(VexFlow, [{\n    key: \"trackFromVoice\",\n    value:\n    /**\n     * Support for converting VexFlow voice into MidiWriterJS track\n     * @return MidiWriter.Track object\n     */\n    function trackFromVoice(voice) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        addRenderedAccidentals: false\n      };\n      var track = new Track();\n      var wait = [];\n      voice.tickables.forEach(function (tickable) {\n        if (tickable.noteType === 'n') {\n          track.addEvent(new NoteEvent({\n            pitch: tickable.keys.map(function (pitch, index) {\n              return _this.convertPitch(pitch, index, tickable, options.addRenderedAccidentals);\n            }),\n            duration: _this.convertDuration(tickable),\n            wait: wait\n          })); // reset wait\n\n          wait = [];\n        } else if (tickable.noteType === 'r') {\n          // move on to the next tickable and add this to the stack\n          // of the `wait` property for the next note event\n          wait.push(_this.convertDuration(tickable));\n        }\n      }); // There may be outstanding rests at the end of the track,\n      // pad with a ghost note (zero duration and velocity), just to capture the wait.\n\n      if (wait.length > 0) {\n        track.addEvent(new NoteEvent({\n          pitch: '[c4]',\n          duration: '0',\n          wait: wait,\n          velocity: '0'\n        }));\n      }\n\n      return track;\n    }\n    /**\n     * Converts VexFlow pitch syntax to MidiWriterJS syntax\n     * @param pitch string\n     * @param index pitch index\n     * @param note struct from Vexflow\n     * @param addRenderedAccidentals adds Vexflow rendered accidentals\n     */\n\n  }, {\n    key: \"convertPitch\",\n    value: function convertPitch(pitch, index, note) {\n      var addRenderedAccidentals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      // Splits note name from octave\n      var pitchParts = pitch.split('/'); // Retrieves accidentals from pitch\n      // Removes natural accidentals since they are not accepted in Tonal Midi\n\n      var accidentals = pitchParts[0].substring(1).replace('n', '');\n\n      if (addRenderedAccidentals) {\n        var _note$getAccidentals;\n\n        (_note$getAccidentals = note.getAccidentals()) === null || _note$getAccidentals === void 0 ? void 0 : _note$getAccidentals.forEach(function (accidental) {\n          if (accidental.index === index) {\n            if (accidental.type === 'n') {\n              accidentals = '';\n            } else {\n              accidentals += accidental.type;\n            }\n          }\n        });\n      }\n\n      return pitchParts[0][0] + accidentals + pitchParts[1];\n    }\n    /**\n     * Converts VexFlow duration syntax to MidiWriterJS syntax\n     * @param note struct from VexFlow\n     */\n\n  }, {\n    key: \"convertDuration\",\n    value: function convertDuration(note) {\n      return 'd'.repeat(note.dots) + this.convertBaseDuration(note.duration) + (note.tuplet ? 't' + note.tuplet.num_notes : '');\n    }\n    /**\n     * Converts VexFlow base duration syntax to MidiWriterJS syntax\n     * @param duration Vexflow duration\n     * @returns MidiWriterJS duration\n     */\n\n  }, {\n    key: \"convertBaseDuration\",\n    value: function convertBaseDuration(duration) {\n      switch (duration) {\n        case 'w':\n          return '1';\n\n        case 'h':\n          return '2';\n\n        case 'q':\n          return '4';\n\n        default:\n          return duration;\n      }\n    }\n  }]);\n\n  return VexFlow;\n}();\n\n/**\n * Object representation of a header chunk section of a MIDI file.\n * @param {number} numberOfTracks - Number of tracks\n * @return {HeaderChunk}\n */\n\nvar HeaderChunk = /*#__PURE__*/_createClass(function HeaderChunk(numberOfTracks) {\n  _classCallCheck(this, HeaderChunk);\n\n  this.type = Constants.HEADER_CHUNK_TYPE;\n  var trackType = numberOfTracks > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;\n  this.data = trackType.concat(Utils.numberToBytes(numberOfTracks, 2), // two bytes long,\n  Constants.HEADER_CHUNK_DIVISION);\n  this.size = [0, 0, 0, this.data.length];\n});\n\n/**\n * Object that puts together tracks and provides methods for file output.\n * @param {array|Track} tracks - A single {Track} object or an array of {Track} objects.\n * @param {object} options - {middleC: 'C4'}\n * @return {Writer}\n */\n\nvar Writer = /*#__PURE__*/function () {\n  function Writer(tracks) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Writer);\n\n    // Ensure tracks is an array\n    this.tracks = Utils.toArray(tracks);\n    this.options = options;\n  }\n  /**\n   * Builds array of data from chunkschunks.\n   * @return {array}\n   */\n\n\n  _createClass(Writer, [{\n    key: \"buildData\",\n    value: function buildData() {\n      var _this = this;\n\n      var data = [];\n      data.push(new HeaderChunk(this.tracks.length)); // For each track add final end of track event and build data\n\n      this.tracks.forEach(function (track) {\n        data.push(track.buildData(_this.options));\n      });\n      return data;\n    }\n    /**\n     * Builds the file into a Uint8Array\n     * @return {Uint8Array}\n     */\n\n  }, {\n    key: \"buildFile\",\n    value: function buildFile() {\n      var build = []; // Data consists of chunks which consists of data\n\n      this.buildData().forEach(function (d) {\n        return build = build.concat(d.type, d.size, d.data);\n      });\n      return new Uint8Array(build);\n    }\n    /**\n     * Convert file buffer to a base64 string.  Different methods depending on if browser or node.\n     * @return {string}\n     */\n\n  }, {\n    key: \"base64\",\n    value: function base64() {\n      if (typeof btoa === 'function') return btoa(String.fromCharCode.apply(null, this.buildFile()));\n      return Buffer.from(this.buildFile()).toString('base64');\n    }\n    /**\n     * Get the data URI.\n     * @return {string}\n     */\n\n  }, {\n    key: \"dataUri\",\n    value: function dataUri() {\n      return 'data:audio/midi;base64,' + this.base64();\n    }\n    /**\n     * Set option on instantiated Writer.\n     * @param {string} key\n     * @param {any} value\n     * @return {Writer}\n     */\n\n  }, {\n    key: \"setOption\",\n    value: function setOption(key, value) {\n      this.options[key] = value;\n      return this;\n    }\n    /**\n     * Output to stdout\n     * @return {string}\n     */\n\n  }, {\n    key: \"stdout\",\n    value: function stdout() {\n      return process.stdout.write(Buffer.from(this.buildFile()));\n    }\n  }]);\n\n  return Writer;\n}();\n\nvar main = {\n  Constants: Constants,\n  ControllerChangeEvent: ControllerChangeEvent,\n  CuePointEvent: CuePointEvent,\n  EndTrackEvent: EndTrackEvent,\n  InstrumentNameEvent: InstrumentNameEvent,\n  KeySignatureEvent: KeySignatureEvent,\n  LyricEvent: LyricEvent,\n  MarkerEvent: MarkerEvent,\n  NoteOnEvent: NoteOnEvent,\n  NoteOffEvent: NoteOffEvent,\n  NoteEvent: NoteEvent,\n  PitchBendEvent: PitchBendEvent,\n  ProgramChangeEvent: ProgramChangeEvent,\n  TempoEvent: TempoEvent,\n  TextEvent: TextEvent,\n  TimeSignatureEvent: TimeSignatureEvent,\n  Track: Track,\n  TrackNameEvent: TrackNameEvent,\n  Utils: Utils,\n  VexFlow: VexFlow,\n  Writer: Writer\n};\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["midi", "note", "obj", "_setPrototypeOf", "o", "p", "Utils", "ControllerChangeEvent", "CuePointEvent", "EndTrackEvent", "InstrumentNameEvent", "KeySignatureEvent", "note", "LyricEvent", "MarkerEvent", "NoteOnEvent", "NoteOffEvent", "NoteEvent", "scale14bits", "PitchBendEvent", "ProgramChangeEvent", "TempoEvent", "TextEvent", "TimeSignatureEvent", "CopyrightEvent", "TrackNameEvent", "Track", "VexFlow", "HeaderChunk", "Writer"]
}
